/* The following code was generated by JFlex 1.4.3 on 25/10/24 11:10 AM */


package tslexer;
import static tslexer.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25/10/24 11:10 AM from the specification file
 * <tt>C:/Users/dsdev/OneDrive/Escritorio/PryectoPS/java/TsLexer/src/tslexer/Lexer.flex</tt>
 */
class TypeScriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\5\27\0\1\47\4\0\1\47\1\44\1\44\1\10\1\7"+
    "\1\3\1\11\1\45\1\4\12\2\1\0\1\3\1\0\1\6\3\0"+
    "\3\1\1\46\26\1\1\44\1\0\1\44\1\0\1\1\1\47\1\15"+
    "\1\12\1\17\1\30\1\14\1\32\1\31\1\22\1\26\1\43\1\16"+
    "\1\23\1\33\1\25\1\24\1\35\1\42\1\13\1\20\1\21\1\27"+
    "\1\40\1\37\1\34\1\36\1\41\1\44\1\0\1\44\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\25\2\1\12\1\13\1\0\1\14"+
    "\1\15\12\2\1\16\26\2\2\16\3\2\1\16\20\2"+
    "\1\17\44\2\1\16\52\2\1\16\34\2\1\16\14\2"+
    "\1\16\31\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\50\0\240\0\50\0\310"+
    "\0\360\0\50\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8"+
    "\0\u01e0\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8"+
    "\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438"+
    "\0\50\0\50\0\u0460\0\u0488\0\50\0\u04b0\0\u04d8\0\u0500"+
    "\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0"+
    "\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\120\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18"+
    "\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58"+
    "\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0460\0\u0d20\0\u0d48\0\u0d70"+
    "\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0"+
    "\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0"+
    "\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130"+
    "\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270"+
    "\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0"+
    "\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0"+
    "\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770"+
    "\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0"+
    "\0\u18d8\0\u1900\0\u1928\0\u1950\0\u0f28\0\u1978\0\u19a0\0\u19c8"+
    "\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08"+
    "\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48"+
    "\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88"+
    "\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8"+
    "\0\u1ef0\0\u1f18\0\u1f40\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008"+
    "\0\u2030\0\u2058\0\u1fe0\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120"+
    "\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260"+
    "\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u2350\0\u2378\0\u23a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\3\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\3\1\35\1\36\1\37"+
    "\1\40\3\3\1\41\1\2\1\3\1\42\51\0\2\3"+
    "\7\0\32\3\2\0\1\3\3\0\1\4\42\0\1\43"+
    "\6\0\1\44\51\0\1\45\43\0\1\4\46\0\2\3"+
    "\7\0\1\3\1\46\10\3\1\47\1\3\1\50\7\3"+
    "\1\51\5\3\2\0\1\3\2\0\2\3\7\0\2\3"+
    "\1\52\27\3\2\0\1\3\2\0\2\3\7\0\11\3"+
    "\1\53\1\3\1\54\6\3\1\55\7\3\2\0\1\3"+
    "\2\0\2\3\7\0\1\56\1\57\4\3\1\60\4\3"+
    "\1\61\11\3\1\62\4\3\2\0\1\3\2\0\2\3"+
    "\7\0\2\3\1\63\27\3\2\0\1\3\2\0\2\3"+
    "\7\0\3\3\1\64\4\3\1\65\1\66\1\67\17\3"+
    "\2\0\1\3\2\0\2\3\7\0\2\3\1\70\4\3"+
    "\1\71\1\72\4\3\1\73\6\3\1\74\1\75\4\3"+
    "\2\0\1\3\2\0\2\3\7\0\1\3\1\76\6\3"+
    "\1\77\13\3\1\100\5\3\2\0\1\3\2\0\2\3"+
    "\7\0\2\3\1\70\7\3\1\101\17\3\2\0\1\3"+
    "\2\0\2\3\7\0\1\102\25\3\1\103\3\3\2\0"+
    "\1\3\2\0\2\3\7\0\2\3\1\104\1\105\11\3"+
    "\1\106\14\3\2\0\1\3\2\0\2\3\7\0\6\3"+
    "\1\107\4\3\1\110\4\3\1\107\1\111\10\3\2\0"+
    "\1\3\2\0\2\3\7\0\13\3\1\112\16\3\2\0"+
    "\1\3\2\0\2\3\7\0\2\3\1\113\7\3\1\114"+
    "\17\3\2\0\1\3\2\0\2\3\7\0\2\3\1\70"+
    "\6\3\1\115\1\116\17\3\2\0\1\3\2\0\2\3"+
    "\7\0\1\3\1\117\1\3\1\120\5\3\1\121\1\122"+
    "\1\3\1\123\1\124\14\3\2\0\1\3\2\0\2\3"+
    "\7\0\12\3\1\125\17\3\2\0\1\3\2\0\2\3"+
    "\7\0\1\3\1\126\1\3\1\127\11\3\1\130\14\3"+
    "\2\0\1\3\2\0\2\3\7\0\14\3\1\131\15\3"+
    "\2\0\1\3\2\0\2\3\7\0\10\3\1\132\3\3"+
    "\1\133\15\3\2\0\1\3\2\0\2\3\7\0\3\3"+
    "\1\122\6\3\1\134\17\3\2\0\1\3\47\0\1\135"+
    "\1\0\5\44\1\0\42\44\1\0\2\3\7\0\2\3"+
    "\1\136\27\3\2\0\1\3\2\0\2\3\7\0\12\3"+
    "\1\137\17\3\2\0\1\3\2\0\2\3\7\0\17\3"+
    "\1\140\12\3\2\0\1\3\2\0\2\3\7\0\7\3"+
    "\1\141\22\3\2\0\1\3\2\0\2\3\7\0\3\3"+
    "\1\142\3\3\1\143\20\3\1\144\1\3\2\0\1\3"+
    "\2\0\2\3\7\0\6\3\1\141\23\3\2\0\1\3"+
    "\2\0\2\3\7\0\15\3\1\145\14\3\2\0\1\3"+
    "\2\0\2\3\7\0\7\3\1\146\13\3\1\72\6\3"+
    "\2\0\1\3\2\0\2\3\7\0\6\3\1\147\23\3"+
    "\2\0\1\3\2\0\2\3\7\0\17\3\1\150\12\3"+
    "\2\0\1\3\2\0\2\3\7\0\24\3\1\151\5\3"+
    "\2\0\1\3\2\0\2\3\7\0\24\3\1\107\5\3"+
    "\2\0\1\3\2\0\2\3\7\0\3\3\1\152\26\3"+
    "\2\0\1\3\2\0\2\3\7\0\24\3\1\153\5\3"+
    "\2\0\1\3\2\0\2\3\7\0\6\3\1\141\1\154"+
    "\22\3\2\0\1\3\2\0\2\3\7\0\3\3\1\122"+
    "\26\3\2\0\1\3\2\0\2\3\7\0\3\3\1\155"+
    "\26\3\2\0\1\3\2\0\2\3\7\0\13\3\1\156"+
    "\16\3\2\0\1\3\2\0\2\3\7\0\7\3\1\107"+
    "\22\3\2\0\1\3\2\0\2\3\7\0\1\3\1\157"+
    "\1\3\1\160\26\3\2\0\1\3\2\0\2\3\7\0"+
    "\12\3\1\161\17\3\2\0\1\3\2\0\2\3\7\0"+
    "\23\3\1\162\6\3\2\0\1\3\2\0\2\3\7\0"+
    "\13\3\1\163\5\3\1\164\10\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\165\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\166\11\3\1\141\6\3\1\107"+
    "\5\3\2\0\1\3\2\0\2\3\7\0\1\3\1\167"+
    "\12\3\1\170\15\3\2\0\1\3\2\0\2\3\7\0"+
    "\23\3\1\171\6\3\2\0\1\3\2\0\2\3\7\0"+
    "\13\3\1\172\16\3\2\0\1\3\2\0\2\3\7\0"+
    "\31\3\1\173\2\0\1\3\2\0\2\3\7\0\2\3"+
    "\1\174\27\3\2\0\1\3\2\0\2\3\7\0\25\3"+
    "\1\107\1\162\3\3\2\0\1\3\2\0\2\3\7\0"+
    "\7\3\1\175\11\3\1\176\10\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\177\7\3\1\200\10\3\2\0"+
    "\1\3\2\0\2\3\7\0\6\3\1\201\1\202\10\3"+
    "\1\162\11\3\2\0\1\3\2\0\2\3\7\0\23\3"+
    "\1\203\6\3\2\0\1\3\2\0\2\3\7\0\4\3"+
    "\1\204\7\3\1\205\1\3\1\206\13\3\2\0\1\3"+
    "\2\0\2\3\7\0\1\207\4\3\1\210\3\3\1\211"+
    "\6\3\1\212\11\3\2\0\1\3\2\0\2\3\7\0"+
    "\15\3\1\213\14\3\2\0\1\3\2\0\2\3\7\0"+
    "\12\3\1\214\17\3\2\0\1\3\2\0\2\3\7\0"+
    "\7\3\1\215\22\3\2\0\1\3\2\0\2\3\7\0"+
    "\12\3\1\145\17\3\2\0\1\3\2\0\2\3\7\0"+
    "\11\3\1\53\20\3\2\0\1\3\2\0\2\3\7\0"+
    "\12\3\1\216\17\3\2\0\1\3\2\0\2\3\7\0"+
    "\1\3\1\107\30\3\2\0\1\3\2\0\2\3\7\0"+
    "\13\3\1\217\16\3\2\0\1\3\2\0\2\3\7\0"+
    "\13\3\1\220\16\3\2\0\1\3\2\0\2\3\7\0"+
    "\16\3\1\221\13\3\2\0\1\3\2\0\2\3\7\0"+
    "\12\3\1\222\1\3\1\223\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\224\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\225\31\3\2\0\1\3\2\0\2\3"+
    "\7\0\2\3\1\226\27\3\2\0\1\3\2\0\2\3"+
    "\7\0\14\3\1\227\15\3\2\0\1\3\2\0\2\3"+
    "\7\0\7\3\1\230\22\3\2\0\1\3\2\0\2\3"+
    "\7\0\11\3\1\231\2\3\1\232\15\3\2\0\1\3"+
    "\2\0\2\3\7\0\3\3\1\233\26\3\2\0\1\3"+
    "\2\0\2\3\7\0\11\3\1\234\20\3\2\0\1\3"+
    "\2\0\2\3\7\0\14\3\1\235\15\3\2\0\1\3"+
    "\2\0\2\3\7\0\2\3\1\107\27\3\2\0\1\3"+
    "\2\0\2\3\7\0\16\3\1\236\13\3\2\0\1\3"+
    "\2\0\2\3\7\0\15\3\1\237\14\3\2\0\1\3"+
    "\2\0\2\3\7\0\15\3\1\240\14\3\2\0\1\3"+
    "\2\0\2\3\7\0\21\3\1\107\10\3\2\0\1\3"+
    "\2\0\2\3\7\0\2\3\1\241\27\3\2\0\1\3"+
    "\2\0\2\3\7\0\7\3\1\242\22\3\2\0\1\3"+
    "\2\0\2\3\7\0\15\3\1\243\14\3\2\0\1\3"+
    "\2\0\2\3\7\0\13\3\1\244\16\3\2\0\1\3"+
    "\2\0\2\3\7\0\14\3\1\70\15\3\2\0\1\3"+
    "\2\0\2\3\7\0\12\3\1\245\17\3\2\0\1\3"+
    "\2\0\2\3\7\0\5\3\1\230\24\3\2\0\1\3"+
    "\2\0\2\3\7\0\6\3\1\170\23\3\2\0\1\3"+
    "\2\0\2\3\7\0\6\3\1\246\1\247\22\3\2\0"+
    "\1\3\2\0\2\3\7\0\14\3\1\101\15\3\2\0"+
    "\1\3\2\0\2\3\7\0\7\3\1\250\22\3\2\0"+
    "\1\3\2\0\2\3\7\0\1\3\1\70\30\3\2\0"+
    "\1\3\2\0\2\3\7\0\2\3\1\122\27\3\2\0"+
    "\1\3\2\0\2\3\7\0\5\3\1\251\24\3\2\0"+
    "\1\3\2\0\2\3\7\0\1\252\31\3\2\0\1\3"+
    "\2\0\2\3\7\0\7\3\1\154\22\3\2\0\1\3"+
    "\2\0\2\3\7\0\13\3\1\253\16\3\2\0\1\3"+
    "\2\0\2\3\7\0\12\3\1\254\17\3\2\0\1\3"+
    "\2\0\2\3\7\0\6\3\1\107\23\3\2\0\1\3"+
    "\2\0\2\3\7\0\2\3\1\255\27\3\2\0\1\3"+
    "\2\0\2\3\7\0\17\3\1\107\12\3\2\0\1\3"+
    "\2\0\2\3\7\0\2\3\1\256\27\3\2\0\1\3"+
    "\2\0\2\3\7\0\1\3\1\257\30\3\2\0\1\3"+
    "\2\0\2\3\7\0\14\3\1\260\15\3\2\0\1\3"+
    "\2\0\2\3\7\0\2\3\1\261\27\3\2\0\1\3"+
    "\2\0\2\3\7\0\11\3\1\107\20\3\2\0\1\3"+
    "\2\0\2\3\7\0\1\162\31\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\262\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\263\1\264\27\3\2\0\1\3"+
    "\2\0\2\3\7\0\11\3\1\265\1\161\17\3\2\0"+
    "\1\3\2\0\2\3\7\0\13\3\1\266\16\3\2\0"+
    "\1\3\2\0\2\3\7\0\30\3\1\267\1\3\2\0"+
    "\1\3\2\0\2\3\7\0\2\3\1\270\27\3\2\0"+
    "\1\3\2\0\2\3\7\0\15\3\1\271\14\3\2\0"+
    "\1\3\2\0\2\3\7\0\11\3\1\272\20\3\2\0"+
    "\1\3\2\0\2\3\7\0\2\3\1\51\27\3\2\0"+
    "\1\3\2\0\2\3\7\0\3\3\1\273\26\3\2\0"+
    "\1\3\2\0\2\3\7\0\1\227\31\3\2\0\1\3"+
    "\2\0\2\3\7\0\1\274\31\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\107\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\70\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\275\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\276\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\15\3\1\227\14\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\277\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\26\3\1\300\3\3\2\0\1\3\2\0"+
    "\2\3\7\0\4\3\1\301\25\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\250\20\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\232\20\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\141\20\3\2\0\1\3\2\0"+
    "\2\3\7\0\10\3\1\107\21\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\302\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\16\3\1\107\13\3\2\0\1\3\2\0"+
    "\2\3\7\0\4\3\1\107\25\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\303\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\70\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\304\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\305\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\306\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\307\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\310\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\21\3\1\311\10\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\107\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\20\3\1\107\11\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\312\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\313\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\244\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\10\3\1\314\21\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\177\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\6\3\1\315\23\3\2\0\1\3\2\0"+
    "\2\3\7\0\25\3\1\107\4\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\70\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\316\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\26\3\1\141\3\3\2\0\1\3\2\0"+
    "\2\3\7\0\6\3\1\317\23\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\320\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\321\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\322\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\243\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\323\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\15\3\1\141\14\3\2\0\1\3\2\0"+
    "\2\3\7\0\20\3\1\324\11\3\2\0\1\3\2\0"+
    "\2\3\7\0\17\3\1\325\12\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\306\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\15\3\1\326\14\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\177\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\327\20\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\330\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\331\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\51\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\332\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\132\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\305\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\333\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\107\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\141\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\16\3\1\170\13\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\256\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\334\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\335\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\267\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\1\3\1\336\30\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\337\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\340\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\23\3\1\341\6\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\342\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\343\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\20\3\1\341\11\3\2\0\1\3\2\0"+
    "\2\3\7\0\25\3\1\305\4\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\344\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\17\3\1\162\12\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\70\20\3\2\0\1\3\2\0"+
    "\2\3\7\0\11\3\1\61\20\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\345\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\346\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\17\3\1\141\12\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\347\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\15\3\1\350\14\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\351\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\235\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\16\3\1\141\13\3\2\0\1\3\2\0"+
    "\2\3\7\0\3\3\1\352\26\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\353\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\6\3\1\250\23\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\354\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\305\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\354\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\170\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\355\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\13\3\1\356\16\3\2\0\1\3\2\0"+
    "\2\3\7\0\5\3\1\141\24\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\153\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\2\3\1\232\27\3\2\0\1\3\2\0"+
    "\2\3\7\0\7\3\1\357\22\3\2\0\1\3\2\0"+
    "\2\3\7\0\14\3\1\360\15\3\2\0\1\3\2\0"+
    "\2\3\7\0\12\3\1\122\17\3\2\0\1\3\2\0"+
    "\2\3\7\0\27\3\1\354\2\3\2\0\1\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\26\1\2\11\1\0\1\1\1\11\313\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TypeScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { lexema = yytext(); return STRING;
          }
        case 16: break;
        case 8: 
          { return MUL;
          }
        case 17: break;
        case 10: 
          { lexema = yytext(); return BRACKETS;
          }
        case 18: break;
        case 7: 
          { return MAS;
          }
        case 19: break;
        case 2: 
          { lexema = yytext(); return ID;
          }
        case 20: break;
        case 1: 
          { lexema = yytext(); return NOT_RECOGNIZED;
          }
        case 21: break;
        case 9: 
          { return MENOS;
          }
        case 22: break;
        case 15: 
          { lexema = yytext(); return REAL;
          }
        case 23: break;
        case 12: 
          { return COMMENT;
          }
        case 24: break;
        case 4: 
          { return SEP;
          }
        case 25: break;
        case 13: 
          { return IGUAL;
          }
        case 26: break;
        case 3: 
          { lexema = yytext(); return INT;
          }
        case 27: break;
        case 5: 
          { lexema = yytext(); return Token.NEWLINE;
          }
        case 28: break;
        case 14: 
          { return COND;
          }
        case 29: break;
        case 6: 
          { return ASIG;
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
